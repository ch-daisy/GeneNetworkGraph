// For MSIE < 9, forget itfunction D3notok() {  document.getElementById('sidepanel').style.visibility = 'hidden';  var nocontent = document.getElementById('nocontent');  nocontent.style.visibility = 'visible';  nocontent.style.pointerEvents = 'all';  var t = document.getElementsByTagName('body');  var body = document.getElementsByTagName('body')[0];}// Highlight a gene in the graph. It is a closure within the d3.json() call.var selectGene = undefined;// Change status of a panel from visible to hidden or viceversavar toggleDiv = undefined;// Clear all help boxes and select a gene in network and in gene details panelvar clearAndSelect = undefined;// The call to set a zoom value -- currently unused// (zoom is set via standard mouse-based zooming)var zoomCall = undefined;// -------------------------------------------------------------------// Do the stuff -- to be called after D3.js has loadedfunction D3ok() {  // Some constants  var WIDTH = document.body.clientWidth||document.documentElement.clientWidth,      HEIGHT = (document.body.clientHeight||document.documentElement.clientHeight)-20,      SHOW_THRESHOLD = 2.5;  // Variables keeping graph state  var activeGene = undefined;  var currentOffset = { x : 0, y : 0 };  var currentZoom = 1.0;  // The D3.js scales  var xScale = d3.scale.linear()    .domain([0, WIDTH])    .range([0, WIDTH]);  var yScale = d3.scale.linear()    .domain([0, HEIGHT])    .range([0, HEIGHT]);  var zoomScale = d3.scale.linear()    .domain([1,6])    .range([1,6])    .clamp(true);/* .......................................................................... */  //get color function, make the nodes group by color  var color = d3.scale.category20();  // The D3.js force-directed layout  var force = d3.layout.force()    .charge(-320)    .size( [WIDTH, HEIGHT] )    .linkStrength( function(d,idx) { return d.weight; } );  // Add to the page the SVG element that will contain the gene network  var svg = d3.select("#geneNetwork").append("svg:svg")    .attr('xmlns','http://www.w3.org/2000/svg')    .attr("width", WIDTH)    .attr("height", HEIGHT)    .attr("id","graph")    .attr("viewBox", "0 0 " + WIDTH + " " + HEIGHT )    .attr("preserveAspectRatio", "xMidYMid meet");  // Gene panel: the div into which the gene details info will be written  var geneInfoDiv = d3.select("#geneInfo");  /* ....................................................................... */  // Get the current size & offset of the browser's viewport window  function getViewportSize( w ) {    var w = w || window;    if( w.innerWidth != null )       return { w: w.innerWidth, 	       h: w.innerHeight,	       x : w.pageXOffset,	       y : w.pageYOffset };    var d = w.document;    if( document.compatMode == "CSS1Compat" )      return { w: d.documentElement.clientWidth,	       h: d.documentElement.clientHeight,	       x: d.documentElement.scrollLeft,	       y: d.documentElement.scrollTop };    else      return { w: d.body.clientWidth, 	       h: d.body.clientHeight,	       x: d.body.scrollLeft,	       y: d.body.scrollTop};  }  function getQStringParameterByName(name) {    var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);    return match && decodeURIComponent(match[1].replace(/\+/g, ' '));  }  /* Change status of a panel from visible to hidden or viceversa     id: identifier of the div to change     status: 'on' or 'off'. If not specified, the panel will toggle status  */  toggleDiv = function( id, status ) {    var d = d3.select('div#'+id);    var m = d3.select('div#mask');    if( status === undefined ){      if(id=='help'){        status = d.attr('class') == 'panel_on' ? 'off' : 'on';         d.attr( 'class', 'panel_' + status );        if (status=='on') {          m.attr('class','show');        }else{          m.attr('class','hide');        }      }else{        status = d.attr('class') == 'fadeIn' ? 'off' : 'on';        d.attr('class','fadeOut');      }     }    return false;  }  /* Clear all help boxes and select a gene in the network and in the      gene details panel  */  clearAndSelect = function (id) {    toggleDiv('faq','off');     toggleDiv('help','off');     selectGene(id,true);	// we use here the selectGene() closure  }  /* Compose the content for the panel with gene details.     Parameters: the node data, and the array containing all nodes  */  function getGeneInfo( n, nodeArray ) {    var info = '<div id="infowrap"><div id="cover">';    if( n.cover )      info += '<img class="cover" height="300" src="' + n.cover + '" title="' + n.label + '"/>';    else      info += '<div class=t style="float: left">' + n.title + '</div>';      info += '<a href="#" class="action" style="top: 265px;right: 20px;" title="center graph" onclick="selectGene('+n.index+',true);"><i class="fa fa-search"></i></a>';      info += '<br/></div><div style="clear: both;">'    /*????????????????????????????????????????????*///the info list in the panel    if( n.genre )      info += '<div class=f><span class=l>Genre</span>: <span class=g>'            + n.genre + '</span></div>';    if( n.director )      info += '<div class=f><span class=l>Directed by</span>: <span class=d>'            + n.director + '</span></div>';    if( n.cast )      info += '<div class=f><span class=l>Cast</span>: <span class=c>'            + n.cast + '</span></div>';    if( n.duration )      info += '<div class=f><span class=l>Year</span>: ' + n.year            + '<span class=l style="margin-left:1em;">Duration</span>: '            + n.duration + '</div>';    if( n.links ) {      info += '<div class=f><span class=l>Related to</span>: ';      n.links.forEach( function(idx) {	info += '[<a href="javascript:void(0);" onclick="selectGene('  	     + idx + ',true);">' + nodeArray[idx].label + '</a>]'      });      info += '</div></div>';    }/*????????????????????????????????????????????*/  info += '<a href="#" id="close" class="action" style="left:0" title="close panel" onClick="toggleDiv(\'geneInfo\');"><i class="fa fa-chevron-right"></i></a>';    return info;  }  // *************************************************************************  d3.json(    'movie-network-25-7-3.json',    function(data) {    // Declare the variables pointing to the node & link arrays    var nodeArray = data.nodes;    var linkArray = data.links;    minLinkWeight =       Math.min.apply( null, linkArray.map( function(n) {return n.weight;} ) );    maxLinkWeight =       Math.max.apply( null, linkArray.map( function(n) {return n.weight;} ) );    // Add the node & link arrays to the layout, and start it    force      .nodes(nodeArray)      .links(linkArray)      .start();    // A couple of scales for node radius & edge width    var node_size = d3.scale.linear()      .domain([5,10])	// we know score is in this domain      .range([1,16])      .clamp(true);    var edge_width = d3.scale.pow().exponent(8)      .domain( [minLinkWeight,maxLinkWeight] )      .range([1,3])      .clamp(true);    /* Add drag & zoom behaviours */    svg.call( d3.behavior.drag()	      .on("drag",dragmove) );    svg.call( d3.behavior.zoom()	      .x(xScale)	      .y(yScale)	      .scaleExtent([1, 6])	      .on("zoom", doZoom) );    // ------- Create the elements of the layout (links and nodes) ------    var networkGraph = svg.append('svg:g').attr('class','grpParent');    // links: simple lines    var graphLinks = networkGraph.append('svg:g').attr('class','grp gLinks')      .selectAll("line")      .data(linkArray, function(d) {return d.source.id+'-'+d.target.id;} )      .enter().append("line")      .style('stroke-width', function(d) { return edge_width(d.weight);} )      .attr("class", "link");    // nodes: an SVG circle    var graphNodes = networkGraph.append('svg:g').attr('class','grp gNodes')      .selectAll("circle")      .data( nodeArray, function(d){return d.label} )      .enter().append("svg:circle")      .attr('id', function(d) { return "c" + d.index; } )      .attr('class', function(d) { return 'node level'+d.level;} )      .attr('r', function(d) { return node_size(d.score); } )      .attr('pointer-events', 'all')	  .style("fill", function(d) { return color(Math.floor(Math.random()*10)); })      //.on("click", function(d) { highlightGraphNode(d,true,this); } )          .on("click", function(d) { showGenePanel(d); } )      .on("mouseover", function(d) { highlightGraphNode(d,true,this);  } )      .on("mouseout",  function(d) { highlightGraphNode(d,false,this); } );    // labels: a group with two SVG text: a title and a shadow (as background)    var graphLabels = networkGraph.append('svg:g').attr('class','grp gLabel')      .selectAll("g.label")      .data( nodeArray, function(d){return d.label} )      .enter().append("svg:g")      .attr('id', function(d) { return "l" + d.index; } )      .attr('class','label');    var labels = graphLabels.append('svg:text')      .attr('x','-2em')      .attr('y','-.3em')      .attr('pointer-events', 'none') // they go to the circle beneath      .attr('id', function(d) { return "lf" + d.index; } )      .attr('class','nlabel')      .text( function(d) { return d.label; } );    /* --------------------------------------------------------------------- */    /* Select/unselect a node in the network graph.       Parameters are:        - node: data for the node to be changed,         - on: true/false to show/hide the node    */    function highlightGraphNode( node, on )    {      //if( d3.event.shiftKey ) on = false; // for debugging      // If we are to activate a gene, and there's already one active,      // first switch that one off      if( on && activeGene !== undefined ) {	     highlightGraphNode( nodeArray[activeGene], false );      }      // locate the SVG nodes: circle & label group      var circle = d3.select( '#c' + node.index );      var label  = d3.select( '#l' + node.index );      // activate/deactivate the node itself      circle.classed( 'main', on );      label.classed( 'on', on || currentZoom >= SHOW_THRESHOLD );      label.selectAll('text').classed( 'main', on );      // activate all siblings      Object(node.links).forEach( function(id) {      	d3.select("#c"+id).classed( 'sibling', on );      	label = d3.select('#l'+id);      	label.classed( 'on', on || currentZoom >= SHOW_THRESHOLD );      	label.selectAll('text.nlabel').classed( 'sibling', on );      });      // set the value for the current active gene      activeGene = on ? node.index : undefined;    }    /* --------------------------------------------------------------------- */    /* Show the details panel for a gene AND highlight its node in        the graph. Also called from outside the d3.json context.       Parameters:       - new_idx: index of the gene to show       - doMoveTo: boolean to indicate if the graph should be centered         on the gene    */    selectGene = function( new_idx, doMoveTo ) {      // do we want to center the graph on the node?      doMoveTo = doMoveTo || false;      if( doMoveTo ) {      	var s = getViewportSize();      	var width  = s.w<WIDTH ? s.w : WIDTH;      	var height = s.h<HEIGHT ? s.h : HEIGHT;      	var offset = { x : s.x + width/2  - nodeArray[new_idx].x*currentZoom,		    y : s.y + height/2 - nodeArray[new_idx].y*currentZoom };	      repositionGraph( offset, undefined, 'move' );      }      // Now highlight the graph node and show its gene panel      highlightGraphNode( nodeArray[new_idx], true );      showGenePanel( nodeArray[new_idx] );    }    /* --------------------------------------------------------------------- */    /* Show the gene details panel for a given node     */    function showGenePanel( node ) {      // Fill it and display the panel      geneInfoDiv.attr('style','');      geneInfoDiv.html(getGeneInfo(node,nodeArray));      var geneInfoDom = document.getElementById("geneInfo");      var infoWrapDom = document.getElementById("infowrap");            var infoWrap = d3.select("#infowrap");      var closeButton = d3.select("a#close");            if(infoWrapDom.offsetHeight>=(HEIGHT-50)){        infoWrap.attr('style','height:'+(HEIGHT-50)+'px;overflow:auto;');        geneInfoDiv.attr('style','top:15px;');      }else{        geneInfoDiv.attr('style','top:'+Math.floor((HEIGHT-geneInfoDom.offsetHeight)/2)+'px;');      }            closeButton.attr('style','top:'+Math.floor(geneInfoDom.offsetHeight/2)+'px;left:0;');      geneInfoDiv.attr("class",'fadeIn');    }	        /* --------------------------------------------------------------------- */    /* Move all graph elements to its new positions. Triggered:       - on node repositioning (as result of a force-directed iteration)       - on translations (user is panning)       - on zoom changes (user is zooming)       - on explicit node highlight (user clicks in a gene panel link)       Set also the values keeping track of current offset & zoom values    */    function repositionGraph( off, z, mode ) {      // do we want to do a transition?      var doTr = (mode == 'move');      // drag: translate to new offset      if( off !== undefined && (off.x != currentOffset.x || off.y != currentOffset.y ) ) {        var g = d3.select('g.grpParent')	      if( doTr )	       g = g.transition().duration(500);	      g.attr("transform", function(d) {         return "translate("+off.x+","+off.y+")"        });	      currentOffset.x = off.x;	      currentOffset.y = off.y;      }      // zoom: get new value of zoom      if( z === undefined ) {	     if( mode != 'tick' )	     return;	// no zoom, no tick, we don't need to go further	     z = currentZoom;      }else	     currentZoom = z;      // move edges      var e = doTr ? graphLinks.transition().duration(500) : graphLinks;      e.attr("x1", function(d) { return z*(d.source.x); })        .attr("y1", function(d) { return z*(d.source.y); })        .attr("x2", function(d) { return z*(d.target.x); })        .attr("y2", function(d) { return z*(d.target.y); });      // move nodes      var n = doTr ? graphNodes.transition().duration(500) : graphNodes;      n.attr("transform", function(d) { return "translate("					 +z*d.x+","+z*d.y+")" } );      // move labels      var l = doTr ? graphLabels.transition().duration(500) : graphLabels;      l.attr("transform", function(d) { return "translate("					 +z*d.x+","+z*d.y+")" } );    }               /* --------------------------------------------------------------------- */    /* Perform drag     */    function dragmove(d) {      var offset = { x : currentOffset.x + d3.event.dx, y : currentOffset.y + d3.event.dy };      repositionGraph( offset, undefined, 'drag' );    }    /* --------------------------------------------------------------------- */    /* Perform zoom. We do "semantic zoom", not geometric zoom     * (i.e. nodes do not change size, but get spread out or stretched     * together as zoom changes)     */    function doZoom( increment ) {      var newZoom = increment === undefined ? d3.event.scale 					: zoomScale(currentZoom+increment);      if( currentZoom == newZoom )	     return;	// no zoom change      // See if we cross the 'show' threshold in either direction      if( currentZoom<SHOW_THRESHOLD && newZoom>=SHOW_THRESHOLD )	     svg.selectAll("g.label").classed('on',true);      else if( currentZoom>=SHOW_THRESHOLD && newZoom<SHOW_THRESHOLD )	     svg.selectAll("g.label").classed('on',false);      // See what is the current graph window size      var s = getViewportSize();      width  = s.w<WIDTH  ? s.w : WIDTH;      height = s.h<HEIGHT ? s.h : HEIGHT;      // Compute the new offset, so that the graph center does not move      var zoomRatio = newZoom/currentZoom;      var newOffset = { x : currentOffset.x*zoomRatio + width/2*(1-zoomRatio),		    y : currentOffset.y*zoomRatio + height/2*(1-zoomRatio) };      // Reposition the graph      repositionGraph( newOffset, newZoom, "zoom" );    }    zoomCall = doZoom;	// unused, so far    /* --------------------------------------------------------------------- */    /* process events from the force-directed graph */    force.on("tick", function() {      repositionGraph(undefined,undefined,'tick');    });    /* A small hack to start the graph with a gene pre-selected */    var mid = getQStringParameterByName('id')    if( mid != null )      clearAndSelect( mid );  });} // end of D3ok()